print('------------- 文件io流 --------------')
# 打开模式与执行操作：
# r ：以只读方式打开文件（默认）
# w ：以写入的方式打开文件，会覆盖已存在的文件
# x ：如果文件已经存在，使用此模式打开会引发异常
# a ：以写入模式打开，如果文件存在，则在末尾追加写入
# b ：以二进制模式打开文件
# t ：以文本模式打开（默认）
# + ：可读写模式（可添加到其他模式中使用）
# U ：通用换行符支持

# 文件对象方法
# f.close() 关闭文件
# f.read(size=-1) 从文件读取size个字符，当未给定size或给负值的时候，读取剩余的所有字符，然后作为字符串返回
# f.readline() 以写入模式打开，如果文件存在，则在末尾追加写入
# f.write(str) 将字符串str写入文件
# f.writelines(seq) 将文件写入字符串序列seq，seq应该是一个返回字符串的可迭代对象
# f.seek(offset,from) 在文件中移动文件指针，从from（0代表文件起始位置，1代表当前位置，2代表文件末尾）偏移offset个字节
# f.tell() 返回当前在文件中的位置

f = open('../../filetest/test.txt')

print('------------- 读取文件 --------------')
print(f.read())

print('------------- 返回当前指针 --------------')
print(f.tell())
print(f.read())

print('------------- 定位指针位置 --------------')
f.seek(0,0)
print(f.read())

print('------------- 循环迭代获取文件内容，换行符号自动转换 --------------')
f.seek(0,0)
for file in f:
    print(file)

print('------------- 写入文件内容（注意文件的打开模式） --------------')
f = open('../../filetest/test.txt','w')

print('------------- 覆盖写入 --------------')
f.write('这是新替换的文本')
f = open('../../filetest/test.txt')
print(f.read())

f.close()